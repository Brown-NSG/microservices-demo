// Code generated by protoc-gen-go. DO NOT EDIT.
// source: svc.proto

package faultservice

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type EmptyMsg struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EmptyMsg) Reset()         { *m = EmptyMsg{} }
func (m *EmptyMsg) String() string { return proto.CompactTextString(m) }
func (*EmptyMsg) ProtoMessage()    {}
func (*EmptyMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5747b2e02f0c537, []int{0}
}

func (m *EmptyMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EmptyMsg.Unmarshal(m, b)
}
func (m *EmptyMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EmptyMsg.Marshal(b, m, deterministic)
}
func (m *EmptyMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmptyMsg.Merge(m, src)
}
func (m *EmptyMsg) XXX_Size() int {
	return xxx_messageInfo_EmptyMsg.Size(m)
}
func (m *EmptyMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_EmptyMsg.DiscardUnknown(m)
}

var xxx_messageInfo_EmptyMsg proto.InternalMessageInfo

type ExperimentReq struct {
	Svc                  string   `protobuf:"bytes,1,opt,name=svc,proto3" json:"svc,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExperimentReq) Reset()         { *m = ExperimentReq{} }
func (m *ExperimentReq) String() string { return proto.CompactTextString(m) }
func (*ExperimentReq) ProtoMessage()    {}
func (*ExperimentReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5747b2e02f0c537, []int{1}
}

func (m *ExperimentReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExperimentReq.Unmarshal(m, b)
}
func (m *ExperimentReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExperimentReq.Marshal(b, m, deterministic)
}
func (m *ExperimentReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExperimentReq.Merge(m, src)
}
func (m *ExperimentReq) XXX_Size() int {
	return xxx_messageInfo_ExperimentReq.Size(m)
}
func (m *ExperimentReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ExperimentReq.DiscardUnknown(m)
}

var xxx_messageInfo_ExperimentReq proto.InternalMessageInfo

func (m *ExperimentReq) GetSvc() string {
	if m != nil {
		return m.Svc
	}
	return ""
}

type InfoMsg struct {
	Info                 string   `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InfoMsg) Reset()         { *m = InfoMsg{} }
func (m *InfoMsg) String() string { return proto.CompactTextString(m) }
func (*InfoMsg) ProtoMessage()    {}
func (*InfoMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5747b2e02f0c537, []int{2}
}

func (m *InfoMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InfoMsg.Unmarshal(m, b)
}
func (m *InfoMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InfoMsg.Marshal(b, m, deterministic)
}
func (m *InfoMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InfoMsg.Merge(m, src)
}
func (m *InfoMsg) XXX_Size() int {
	return xxx_messageInfo_InfoMsg.Size(m)
}
func (m *InfoMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_InfoMsg.DiscardUnknown(m)
}

var xxx_messageInfo_InfoMsg proto.InternalMessageInfo

func (m *InfoMsg) GetInfo() string {
	if m != nil {
		return m.Info
	}
	return ""
}

func init() {
	proto.RegisterType((*EmptyMsg)(nil), "main.EmptyMsg")
	proto.RegisterType((*ExperimentReq)(nil), "main.ExperimentReq")
	proto.RegisterType((*InfoMsg)(nil), "main.InfoMsg")
}

func init() { proto.RegisterFile("svc.proto", fileDescriptor_e5747b2e02f0c537) }

var fileDescriptor_e5747b2e02f0c537 = []byte{
	// 154 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2c, 0x2e, 0x4b, 0xd6,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0xc9, 0x4d, 0xcc, 0xcc, 0x53, 0xe2, 0xe2, 0xe2, 0x70,
	0xcd, 0x2d, 0x28, 0xa9, 0xf4, 0x2d, 0x4e, 0x57, 0x52, 0xe4, 0xe2, 0x75, 0xad, 0x28, 0x48, 0x2d,
	0xca, 0xcc, 0x4d, 0xcd, 0x2b, 0x09, 0x4a, 0x2d, 0x14, 0x12, 0xe0, 0x62, 0x2e, 0x2e, 0x4b, 0x96,
	0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0x31, 0x95, 0x64, 0xb9, 0xd8, 0x3d, 0xf3, 0xd2, 0xf2,
	0x7d, 0x8b, 0xd3, 0x85, 0x84, 0xb8, 0x58, 0x32, 0xf3, 0xd2, 0xf2, 0xa1, 0xb2, 0x60, 0xb6, 0x91,
	0x3d, 0x17, 0x8f, 0x5b, 0x62, 0x69, 0x4e, 0x49, 0x70, 0x6a, 0x51, 0x59, 0x66, 0x72, 0xaa, 0x90,
	0x3e, 0x17, 0x17, 0xc2, 0x44, 0x21, 0x3e, 0x3d, 0x90, 0x95, 0x7a, 0x30, 0xfb, 0xa4, 0x78, 0x21,
	0x7c, 0xa8, 0x81, 0x4a, 0x0c, 0x06, 0x8c, 0x49, 0x6c, 0x60, 0xb7, 0x19, 0x03, 0x02, 0x00, 0x00,
	0xff, 0xff, 0x6b, 0x78, 0x76, 0xea, 0xa8, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// FaultServiceClient is the client API for FaultService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FaultServiceClient interface {
	Experiment(ctx context.Context, in *EmptyMsg, opts ...grpc.CallOption) (FaultService_ExperimentClient, error)
}

type faultServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFaultServiceClient(cc grpc.ClientConnInterface) FaultServiceClient {
	return &faultServiceClient{cc}
}

func (c *faultServiceClient) Experiment(ctx context.Context, in *EmptyMsg, opts ...grpc.CallOption) (FaultService_ExperimentClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FaultService_serviceDesc.Streams[0], "/main.FaultService/Experiment", opts...)
	if err != nil {
		return nil, err
	}
	x := &faultServiceExperimentClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FaultService_ExperimentClient interface {
	Recv() (*InfoMsg, error)
	grpc.ClientStream
}

type faultServiceExperimentClient struct {
	grpc.ClientStream
}

func (x *faultServiceExperimentClient) Recv() (*InfoMsg, error) {
	m := new(InfoMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FaultServiceServer is the server API for FaultService service.
type FaultServiceServer interface {
	Experiment(*EmptyMsg, FaultService_ExperimentServer) error
}

// UnimplementedFaultServiceServer can be embedded to have forward compatible implementations.
type UnimplementedFaultServiceServer struct {
}

func (*UnimplementedFaultServiceServer) Experiment(req *EmptyMsg, srv FaultService_ExperimentServer) error {
	return status.Errorf(codes.Unimplemented, "method Experiment not implemented")
}

func RegisterFaultServiceServer(s *grpc.Server, srv FaultServiceServer) {
	s.RegisterService(&_FaultService_serviceDesc, srv)
}

func _FaultService_Experiment_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EmptyMsg)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FaultServiceServer).Experiment(m, &faultServiceExperimentServer{stream})
}

type FaultService_ExperimentServer interface {
	Send(*InfoMsg) error
	grpc.ServerStream
}

type faultServiceExperimentServer struct {
	grpc.ServerStream
}

func (x *faultServiceExperimentServer) Send(m *InfoMsg) error {
	return x.ServerStream.SendMsg(m)
}

var _FaultService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "main.FaultService",
	HandlerType: (*FaultServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Experiment",
			Handler:       _FaultService_Experiment_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "svc.proto",
}
